name: Fetch ICON-EU GRIB2 and Generate PNGs

on:
  workflow_dispatch:

jobs:
  fetch_and_generate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        param: [t2m, ww, tp, wind, snow, snowfall]
    outputs:
      run: ${{ steps.set_run_date.outputs.run }}
      date: ${{ steps.set_run_date.outputs.date }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.EU_PAT }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Set RUN and DATE
        id: set_run_date
        run: |
          HOUR=$(date -u +%H)
          case $HOUR in
            03|04|05) RUN=00 ;;
            09|10|11) RUN=06 ;;
            15|16|17|18) RUN=12 ;;
            21|22|23) RUN=18 ;;
            *) RUN=00 ;; # fallback
          esac
          DATE=$(date -u +%Y%m%d)
          echo "RUN=$RUN" >> $GITHUB_ENV
          echo "DATE=$DATE" >> $GITHUB_ENV
          echo "run=$RUN" >> $GITHUB_OUTPUT
          echo "date=$DATE" >> $GITHUB_OUTPUT

      - name: Download GRIB2 files for ${{ matrix.param }}
        run: |
          mkdir -p data/${{ matrix.param }}
          cd data/${{ matrix.param }}
          BASE_URL="https://opendata.dwd.de/weather/nwp/icon-eu/grib/${{ env.RUN }}/"
          
          case "${{ matrix.param }}" in
            t2m) VAR_DIR="t_2m"; VAR_FILE="T_2M";;
            ww) VAR_DIR="ww"; VAR_FILE="WW";;
            tp) VAR_DIR="tot_prec"; VAR_FILE="TOT_PREC";;
            wind) VAR_DIR="vmax_10m"; VAR_FILE="VMAX_10M";;
            snow) VAR_DIR="h_snow"; VAR_FILE="H_SNOW";;
            snowfall) VAR_DIR="snowlmt"; VAR_FILE="SNOWLMT";;
          esac

          seq 0 77 | xargs -n 1 -P 12 -I{} bash -c '
            i=$(printf "%03d" {})
            URL="${BASE_URL}${VAR_DIR}/icon-eu_europe_regular-lat-lon_single-level_${{ env.DATE }}${{ env.RUN }}_${i}_${VAR_FILE}.grib2.bz2"
            wget -q -O ${VAR_FILE}_${i}.grib2.bz2 "$URL" || echo "Fehlt: $URL"
            [ -f "${VAR_FILE}_${i}.grib2.bz2" ] && bunzip2 -f "${VAR_FILE}_${i}.grib2.bz2"
          '

          seq 78 3 120 | xargs -n 1 -P 12 -I{} bash -c '
            i=$(printf "%03d" {})
            URL="${BASE_URL}${VAR_DIR}/icon-eu_europe_regular-lat-lon_single-level_${{ env.DATE }}${{ env.RUN }}_${i}_${VAR_FILE}.grib2.bz2"
            wget -q -O ${VAR_FILE}_${i}.grib2.bz2 "$URL" || echo "Fehlt: $URL"
            [ -f "${VAR_FILE}_${i}.grib2.bz2" ] && bunzip2 -f "${VAR_FILE}_${i}.grib2.bz2"
          '

      - name: Generate PNGs for ${{ matrix.param }}
        run: |
          mkdir -p iconeu/${{ env.RUN }}/${{ matrix.param }}
          python scripts/generate_pngs.py data/${{ matrix.param }} iconeu/${{ env.RUN }}/${{ matrix.param }} ${{ matrix.param }}

      - name: Upload PNGs
        uses: actions/upload-artifact@v4
        with:
          name: iconeu-${{ matrix.param }}
          path: iconeu/${{ env.RUN }}/${{ matrix.param }}

  merge_and_deploy:
    runs-on: ubuntu-latest
    needs: fetch_and_generate
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Download all PNG artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./iconeu

      - name: Generate Metadata
        run: |
          python scripts/generate_metadata.py iconeu/${{ needs.fetch_and_generate.outputs.run }} \
            ${{ needs.fetch_and_generate.outputs.run }} \
            ${{ needs.fetch_and_generate.outputs.date }}

      - name: Upload to R2
        run: |
          aws s3 sync ./iconeu/${{ needs.fetch_and_generate.outputs.run }}/ \
            s3://${{ secrets.R2_BUCKET }}/icon-eu/${{ needs.fetch_and_generate.outputs.run }}/ \
            --endpoint-url https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com

          aws s3 cp ./iconeu/metadata.json \
            s3://${{ secrets.R2_BUCKET }}/icon-eu/metadata.json \
            --endpoint-url https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
